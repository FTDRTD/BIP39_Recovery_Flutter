name: Flutter CI/CD - Android, Windows, Linux

# ==========================================================
# VVVV 新增的权限声明 VVVV
# ==========================================================
permissions:
  contents: write # 授予 GITHUB_TOKEN 对仓库内容的写权限，以便推送版本更新
# ==========================================================
# ^^^^ 新增的权限声明 ^^^^
# ==========================================================

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ... [build-android, build-windows, build-linux jobs 保持不变] ...
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 设置 Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
      - name: 安装依赖
        run: flutter pub get
      - name: 设置 Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
      - name: 构建 Android APK
        run: flutter build apk --release
      - name: 上传 Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 5

  build-windows:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 设置 Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
      - name: 安装依赖
        run: flutter pub get
      - name: 启用 Windows 桌面支持
        run: flutter config --enable-windows-desktop
      - name: 构建 Windows 可执行文件
        run: flutter build windows --release
      - name: 创建 Windows 压缩包
        run: |
          cd build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath ../../../../../windows-release.zip
        shell: powershell
      - name: 上传 Windows 可执行文件
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: windows-release.zip
          retention-days: 5

  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 安装 Linux 依赖 (for Ubuntu 20.04)
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            curl jq bash clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev unzip git build-essential
        shell: bash
      - name: 设置 Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
      - name: 将 Flutter SDK 目录标记为安全
        run: git config --global --add safe.directory "$FLUTTER_ROOT"
        shell: bash
      - name: 缓存 Flutter 依赖
        uses: actions/cache@v4
        with:
          path: |
            /root/.pub-cache
            ${{ github.workspace }}/flutter
          key: flutter-linux-2004-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-linux-2004-
      - name: 安装依赖
        run: flutter pub get
      - name: 启用 Linux 桌面支持
        run: flutter config --enable-linux-desktop
      - name: 构建 Linux 可执行文件
        run: flutter build linux --release
      - name: 创建 Linux 压缩包
        run: |
          cd build/linux/x64/release/bundle
          tar -czf ../../../../../linux-release.tar.gz .
        shell: bash
      - name: 上传 Linux 可执行文件
        uses: actions/upload-artifact@v4
        with:
          name: linux-executable
          path: linux-release.tar.gz
          retention-days: 5

  create-release:
    needs: [build-android, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 不再需要 PAT token，默认的 GITHUB_TOKEN 已被授予权限
          # token: ${{ secrets.PAT_TOKEN }} # <--- 移除此行

      - name: 自动增加版本号
        id: version_bumper
        run: |
          current_version=$(grep '^version:' pubspec.yaml | awk '{print $2}' | tr -d '\r')
          base_version=$(echo $current_version | cut -d'+' -f1)
          build_number=$(echo $current_version | cut -d'+' -f2)

          major=$(echo $base_version | cut -d'.' -f1)
          minor=$(echo $base_version | cut -d'.' -f2)
          patch=$(echo $base_version | cut -d'.' -f3)
          new_patch=$((patch + 1))

          new_version="$major.$minor.$new_patch+$build_number"
          echo "旧版本: $current_version"
          echo "新版本: $new_version"

          sed -i "s/^version: .*/version: $new_version/" pubspec.yaml

          echo "APP_VERSION=$major.$minor.$new_patch" >> $GITHUB_ENV
          echo "new_tag=v$major.$minor.$new_patch" >> $GITHUB_OUTPUT

      - name: 提交并推送版本更新
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pubspec.yaml
          if git diff --staged --quiet; then
            echo "版本号未更改，无需提交。"
          else
            git commit -m "chore: 自动增加版本至 ${{ env.APP_VERSION }} [skip ci]"
            git push
            echo "已成功推送版本更新。"
          fi

      # ... [后续的下载、日志生成、创建 Release 等步骤保持不变] ...
      - name: 下载所有工件
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: 列出下载的文件 (调试用)
        run: find artifacts -type f -ls
      - name: 检查是否已存在该版本的 release
        id: check_release
        run: |
          if gh release view "${{ steps.version_bumper.outputs.new_tag }}" >/dev/null 2>&1; then
            echo "Release ${{ steps.version_bumper.outputs.new_tag }} 已存在，跳过..."
            echo "skip_release=true" >> $GITHUB_OUTPUT
          else
            echo "Release ${{ steps.version_bumper.outputs.new_tag }} 不存在，继续..."
            echo "skip_release=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 获取上一个 release 标签
        id: get_previous_tag
        if: steps.check_release.outputs.skip_release == 'false'
        run: |
          PREVIOUS_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "上一个标签: $PREVIOUS_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 生成更新日志
        id: generate_changelog
        if: steps.check_release.outputs.skip_release == 'false'
        run: |
          echo "## 🚀 更新内容" > CHANGELOG.md
          # ... (省略具体日志生成脚本，与之前相同) ...
          echo "" >> CHANGELOG.md
          echo "### ✨ 新功能" >> CHANGELOG.md
          git log ${{ env.PREVIOUS_TAG }}..HEAD --oneline --grep="feat\|add\|new" --grep="功能\|新增" | sed 's/^/- /' >> CHANGELOG.md || echo "- 无新功能更新" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 🐛 错误修复" >> CHANGELOG.md
          git log ${{ env.PREVIOUS_TAG }}..HEAD --oneline --grep="fix\|bug" --grep="修复\|修正" | sed 's/^/- /' >> CHANGELOG.md || echo "- 无错误修复" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "**构建信息:**" >> CHANGELOG.md
          echo "- 构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> CHANGELOG.md
          echo "- Commit: $(git rev-parse --short HEAD)" >> CHANGELOG.md
          echo "- Flutter 版本: $(flutter --version | head -n 1)" >> CHANGELOG.md
          cat CHANGELOG.md
      - name: 创建并上传发行版
        if: steps.check_release.outputs.skip_release == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_bumper.outputs.new_tag }}
          name: Release ${{ env.APP_VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            artifacts/android-apk/app-release.apk
            artifacts/windows-exe/windows-release.zip
            artifacts/linux-executable/linux-release.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 发布成功通知
        if: steps.check_release.outputs.skip_release == 'false'
        run: |
          echo "🎉 Release ${{ env.APP_VERSION }} 创建成功!"
          echo "🔗 查看发布: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version_bumper.outputs.new_tag }}"
